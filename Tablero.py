import pygame
from Ventana import Ventana
from Celda import Celda

NEGRO = (0, 0, 0)
GRIS = (200, 200, 200)
DARK_GRAY = (150, 150, 150)
ROJO = (255, 0, 0)

CELDA_SIZE = 30
MARGIN = 40


class Tablero:  
    def __init__(self, rows, cols, tipo):
        self.rows = rows
        self.cols = cols
        self.tipo = tipo
        self.cells = [[Celda((x, y)) for y in range(self.cols)] for x in range(self.rows)]
        self.hints, self.solution = seleccionar_nanograma(self.rows, self.cols, self.tipo)


    def draw(self, screen):
        start_x = MARGIN + 100
        start_y = MARGIN + 50

        # Dibujar pistas de las filas
        for i, pista in enumerate(self.hints[0]):
            pista_text = " ".join(map(str, pista))
            font = pygame.font.SysFont("Comic Sans MS", 20)
            text_surface = font.render(pista_text, True, NEGRO)
            screen.blit(text_surface, (10, start_y + i * CELDA_SIZE))

        # Dibujar pistas de las columnas
        for j, pista in enumerate(self.hints[1]):
            for k, numero in enumerate(pista):
                font = pygame.font.SysFont("Comic Sans MS", 20)
                text_surface = font.render(str(numero), True, NEGRO)
                screen.blit(text_surface, (start_x + j * CELDA_SIZE + 5, 10 + (k * 30)))

        for fila in range(self.rows):  # dibujar las celdas
            for columna in range(self.cols):
                color = (DARK_GRAY if self.cells[fila][columna].is_filled else (255, 255, 255))
                pygame.draw.rect(screen, color, [(start_x + columna * CELDA_SIZE), (start_y + fila * CELDA_SIZE), CELDA_SIZE, CELDA_SIZE])
                pygame.draw.rect(screen, NEGRO, [(start_x + columna * CELDA_SIZE), (start_y + fila * CELDA_SIZE), CELDA_SIZE, CELDA_SIZE] , 1)

    def get_cell(self, pos):
        x, y = pos
        return self.cells[y][x] if 0 <= x < self.cols and 0 <= y < self.rows else None

    def check_win(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.cells[i][j].is_filled != self.solution[i][j]:
                    return False
        return True


def seleccionar_nanograma(rows, cols, tipo):
    if rows == 5 and cols == 5:
        if tipo == 1:
            hints = (
                [[1, 1], [1, 1, 1], [1, 1], [1, 1], [1]],  # Pistas horizontales
                [[2], [1, 1], [1, 1], [1, 1], [2]]  # Pistas verticales
            )

            solution = [
                [0, 1, 0, 1, 0],
                [1, 0, 1, 0, 1],
                [1, 0, 0, 0, 1],
                [0, 1, 0, 1, 0],
                [0, 0, 1, 0, 0],
            ]
            return hints, solution
        else: 
            hints = (
                [[1, 1], [3, 1], [1, 1], [3, 1], [1, 1]],  # Pistas horizontales
                [[1, 1], [5], [1, 1], [1, 1, 1], [1, 1]]  # Pistas verticales
            )

            solution = [
                [0, 1, 0, 1, 0],
                [1, 1, 1, 0, 1],
                [0, 1, 0, 1, 0],
                [1, 1, 1, 0, 1],
                [0, 1, 0, 1, 0],
            ]   
            return hints, solution
    elif rows == 10 and cols == 10:
        if tipo == 1:
            hints = (
                [[2], [1, 1], [1, 3], [5], [7], [1], [1, 1], [1], [1, 2], [3]],  # Pistas horizontales
                [[2], [1], [3], [3, 1], [2, 2], [1, 1], [1], [3], [1, 1], [1]]  # Pistas verticales
            )

            solution = [
                [1, 1, 0, 0, 1, 1, 1, 0, 0, 1],
                [1, 0, 1, 0, 0, 0, 1, 0, 1, 1],
                 [1, 0, 1, 0, 1, 1, 1, 0, 0, 1],
                [1, 1, 1, 1, 1, 0, 0, 0, 1, 0],
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
                [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                [1, 0, 1, 1, 1, 0, 1, 0, 1, 1],
                [1, 0, 1, 0, 0, 0, 1, 0, 0, 1],
                [0, 0, 0, 1, 1, 1, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
            ]
            return hints, solution
        else:
            hints = (
                [[1], [3], [1, 3], [3, 1], [1, 1], [5], [1, 1], [3], [1], [1]],  # Pistas horizontales
                [[1], [1], [3], [4], [1], [3], [2], [1], [1], [1]]  # Pistas verticales
            )

            solution = [
                [0, 1, 0, 1, 0, 1, 0, 0, 1, 0],
                [1, 0, 1, 1, 1, 0, 0, 0, 1, 1],
                [0, 1, 0, 0, 1, 1, 1, 0, 1, 0],
                [1, 1, 1, 0, 0, 1, 0, 0, 1, 1],
                [0, 0, 0, 1, 1, 0, 1, 0, 0, 0],
                [1, 0, 1, 0, 0, 1, 1, 1, 1, 1],
                [1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
                [0, 1, 1, 1, 1, 0, 0, 1, 0, 1],
                [1, 0, 0, 0, 1, 1, 1, 0, 0, 1],
                [0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
            ]
            return hints, solution
    if rows == 15 and cols == 15:
        if tipo == 1:
            hints = (
                [[2], [2, 1], [10], [1], [3], [3, 1], [2, 2], [2], [3], [3], [1, 1], [2], [3], [1], [1], [2]],  # Pistas horizontales
                [[1], [1], [3], [3], [5], [5], [3, 1], [1], [1, 1], [1, 1, 1], [1], [1], [1, 1], [2], [2]]  # Pistas verticales
            )

            solution = [
                [1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1],
                [1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1],
                [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0],
                [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
                [1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0],
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
                [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1],
                [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1],
                [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
                [0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1],
                [1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
                [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
                [1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1],
                [1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1],
            ]
            return hints, solution
        else:
            hints = (
                [[1], [3], [2], [3], [1, 1], [1, 1], [1], [3], [2], [1, 1, 1], [3], [1], [3], [3], [1, 1], [2]],  # Pistas horizontales
                [[1], [2, 1], [1], [2], [2], [3], [1, 1], [1, 1], [1], [1], [2], [1, 1], [3], [1], [2], [1]]  # Pistas verticales
            )

            solution = [
                [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0],
                [0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1],
                [1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0],
                [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
                [1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0],
                [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0],
                [0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0],
                [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1],
                [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                [1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1],
                [0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0],
                [1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1],
                [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1],
                [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1],
            ]
            return hints, solution
    if rows == 20 and cols == 20:
        if tipo == 1:
            hints = (
                [[4], [1, 1], [2, 2], [1, 1], [6], [1], [1, 1, 1], [3], [1, 1], [1], [2], [1, 1], [1], [1, 1], [1], [3], [3], [1], [1], [3]],  # Pistas horizontales
                [[1], [1], [1], [1, 1], [2], [1], [4], [1], [1], [2], [3], [1], [1], [3], [2], [1], [1], [1], [2], [1], [2]]  # Pistas verticales
            )

            solution = [
                [1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
                [1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
                [0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0],
                [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0],
                [1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0],
                [0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0],
                [0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0],
                [1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1],
                [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0],
                [0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1],
                [1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
                [0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
                [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0],
                [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1],
                [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1],
                [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1],
                [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0],
                [1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1],
            ]
            return hints, solution
        else:
            hints = (
                [[1, 1], [3], [1], [1, 1, 1], [2], [1], [1], [1, 2], [1, 2], [1, 1], [1], [1, 1], [3], [1, 1], [1], [1], [3], [1], [1], [2]],  # Pistas horizontales
                [[1], [2], [1], [1], [3], [1, 1], [3], [1], [1], [2], [1], [3], [2], [1, 1], [1], [1], [1], [2], [2], [1]]  # Pistas verticales
            )

            solution = [
                [1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0],
                [1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0],
                [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0],
                [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1],
                [1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0],
                [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                [1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0],
                [0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0],
                [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0],
                [0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1],
                [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0],
                [1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1],
                [0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0],
                [1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0],
                [0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1],
                [0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0],
                [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0],
                [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1],
            ]
            return hints, solution

    
